# Задача: предложить улучшения кода для уже решённых задач:
# С помощью использования **лямбд, filter, map, zip, enumerate, list comprehension
# В этом случае можно пропустить совсем тривиальные (т.е. задачу 1 или 2 тут точно решать не имеет смысла) 
# - исходите из уровня группы и студента.


###########################################################################
#  Задайте число. Составьте список чисел Фибоначчи, в том числе для отрицательных индексов.
# Пример:
# # - для k = 8 список будет выглядеть так: [-21 ,13, -8, 5, −3, 2, −1, 1, 0, 1, 1, 2, 3, 5, 8, 13, 21]


# def fibonacci(n):
#     first, second = 0, 1
#     fibonacci_num = 0
#     for i in range(n):
#         fibonacci_num = first + second
#         second = first
#         first = fibonacci_num
#     return fibonacci_num

# def negative_fibonacci(n):
#     if n ==1:
#         return 1
#     elif n == 2:
#         return -1
#     else:
#         num1, num2 = 1, -1
#         for i in range(2, n):
#             num1, num2 = num2, num1-num2
#         return num2

# set_number = (input("Ввудите число: "))
# while not set_number.isdigit():
#     set_number = (input("Введите число "))
# set_number = int(set_number)
# list = [0]
# for i in range(1,set_number +1):
#     list.append(fibonacci(i))
#     list.insert(0,negative_fibonacci(i))
# print(list)

###########################################################################
#  Задайте список из нескольких чисел. Напишите программу, которая найдёт сумму элементов списка,
# # стоящих на нечётной позиции.
# Пример:
# - [2, 3, 5, 9, 3] -> на нечётных позициях элементы 3 и 9, ответ: 12

# list_1 = [1,2,3,4,5,6,7,8]
# list_ch = sum(list_1[::2])
# list_nch = sum(list_1[1::2])
# print(f"{list_1} -> сумма элементов на нечётных позициях: {list_ch}")
# print(f"{list_1} -> сумма элементов на чётных позициях: {list_nch}")

###########################################################################
#  Задайте список из вещественных чисел. Напишите программу,
#  которая найдёт разницу между максимальным и минимальным значением дробной части элементов.
# Пример:
# - [1.1, 1.2, 3.1, 5, 10.01] => 0.19

# list_1 = [1.1, 1.2, 3.1, 5, 10.01]
# List_n = [round( i  % 1, 2) for i in list_1 if i % 1 != 0]
# print(f'{list_1} => {max(List_n)-min(List_n)}')


###########################################################################
# 4. Напишите программу, которая будет преобразовывать десятичное число в двоичное.
# Пример:
# - 45 -> 101101
# - 3 -> 11
# - 2 -> 10

# x = int(input("Введи число: ")) 
# y = ''
# while x > 0:
#     y = str(x % 2) + y
#     x = x // 2
# print( f"двоичное представление числа = {y}")
###########################################################################